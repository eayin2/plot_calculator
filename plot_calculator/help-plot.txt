===================================================================
Manual for plotting with plot_calculator using numpy and matplotlib
===================================================================

Examples
========

Ex. 1: Trigonometry: tan(t), cos(t)
-----------------------------------
t = np.arange(-1*np.pi, 3*np.pi, 0.01)
ax.plot(t, np.tan(t), label="tan(t)", linewidth=plot_size*10)
ax.plot(t, np.cos(t), label="cos(t)", linewidth=plot_size*10)
# Set legend
ax.legend(loc="upper right")
# Set axis
ax.axis([-1*np.pi, 3*np.pi, -2, 2])
plot()

Ex. 2: Trigonometry: Ellipse with parametric coordinates
--------------------------------------------------------
# x = u + a*cos(t)
# y = v + b*sin(t)
t = np.linspace(0, 2*np.pi, 100)
plt.plot(.5*np.cos(t) , 1/3*np.sin(t) )
plt.grid(color='lightgray',linestyle='--')
plot()

Ex. 3: General
--------------
t = np.arange(-3, 3, 0.01)
z = t**3
ax.plot(t, z, label="z(t)", linewidth=plot_size*10)
# Custom function plots() to create the plot
plot()

Ex. 4: Complex
--------------
t = np.arange(-3, 6, 0.1)
# Use 1j for the imaginary number, not sympy.I
z = (1-t)*(-2-1j)+t*(2+3*1j)
ax.plot(z.real, z.imag, label="z(t)", linewidth=plot_size*10)
# Custom function plots() to create the plot
plot()

Ex. 5: Draw a point
-------------------
plt.plot(-2*sqrt(2), 2*sqrt(2), "bo")
plot()

Settings
========
plot_size = .35 - Set plot size


Commands
========
- ax.axis([-x, +x, -y, +y]) - Set axis 'zoom'. Set it optionally, by default matplotlib sets the
  zoom fine.
- ax.lines.pop(<graph number to remove>) - Remove a graph from the plot
- ax.plot(x, y, label=r"$\frac{e^x}{2}$") - Format labels. Other: r"$coshx, sinhx
- del_plot() - Delete existing plots or use: ax.lines = []


General notes and limits
========================
- Use numpy (not sympy) to plot functions with matplotlib.
- For plotting complex functions with complex paramters use MATLAB, which is easier than with
  matplotlib.
  See: https://de.mathworks.com/help/matlab/ref/meshgrid.html and
  https://www.youtube.com/watch?v=kUsUHA7qLW4
  In MATLAB e.g.:

  a = -2:0.1:1;
  b = -2:0.1:2;
  [A,B] = meshgrid(a,b);
  z = A + 1i*B
  y = 4./(1+4*i*z)
  surfc(a, b, abs(y))

  The corresponding locus of that complex function would be in matplotlib:

  t = np.arange(-100, 100, 0.01)
  # For the locus we feed the function only real numbers `t`.
  f = 4*(1+4*1j*t)**(-1)
  ax.plot(f.real, f.imag, label="f(t)", linewidth=plot_size*10)
  # Custom function plots() to create the plot
  plot()

  You can see the locus also in the 3D MATLAB plot when you select the point where Y=0.
  E.g. X=1, Y=0, abs(Y)=0.6 is a point on the locus.
